{"version":3,"sources":["components/Carousel.tsx","components/FormField.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","translate","setTranslate","initTranslate","maxTranslate","length","stepWidth","className","style","width","transition","map","image","src","alt","slice","type","onClick","getRandomId","String","Math","random","FormField","name","value","label","onChange","id","htmlFor","App","state","handleChange","e","target","setState","setInfinite","this","action","checked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6895bd08.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [translate, setTranslate] = useState(0);\n\n  const initTranslate = frameSize * itemWidth;\n  const maxTranslate = itemWidth * images.length - initTranslate;\n  const stepWidth = itemWidth * step;\n\n  const handleNextClick = () => {\n    if (translate + stepWidth > maxTranslate) {\n      setTranslate(infinite ? 0 : maxTranslate);\n    } else {\n      setTranslate(translate + stepWidth);\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (translate - (stepWidth) < 0) {\n      setTranslate(infinite ? maxTranslate : 0);\n    } else {\n      setTranslate(translate - stepWidth);\n    }\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"container\"\n        style={{ width: `${frameSize * itemWidth}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{ translate: `-${translate}px`, transition: `${animationDuration / 1000}s` }}\n        >\n          {images.map(image => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={image.slice(6, 7)}\n                style={{ width: `${itemWidth}px` }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          onClick={handlePrevClick}\n          className={(!translate && !infinite)\n            ? 'Carousel__button Carousel__button--prev-disabled'\n            : 'Carousel__button Carousel__button--prev'}\n        >\n          {}\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleNextClick}\n          className={(translate === maxTranslate && !infinite)\n            ? 'Carousel__button Carousel__button--next-disabled'\n            : 'Carousel__button Carousel__button--next'}\n          data-cy=\"next\"\n        >\n          {}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { useState } from 'react';\nimport './Form.scss';\n\nconst getRandomId = () => String(Math.random()).slice(2);\n\ntype Props = {\n  name: string,\n  value: number,\n  label?: string,\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const FormField: React.FC<Props> = ({\n  name,\n  value,\n  label,\n  onChange,\n}) => {\n  const [id] = useState(`${name} - ${getRandomId}`);\n\n  return (\n    <div className=\"Form__field-container\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          className=\"Form__field-text\"\n          id={id}\n          type=\"number\"\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport './components/Form.scss';\nimport Carousel from './components/Carousel';\nimport { FormField } from './components/FormField';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 2,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 700,\n    infinite: false,\n  };\n\n  handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  setInfinite = () => {\n    this.setState(state => ({\n      infinite: !state.infinite,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"Form\" action=\"./\">\n          <FormField\n            name=\"step\"\n            label=\"Step\"\n            value={step}\n            onChange={this.handleChange}\n          />\n          <FormField\n            name=\"frameSize\"\n            label=\"Frame Size\"\n            value={frameSize}\n            onChange={this.handleChange}\n          />\n          <FormField\n            name=\"itemWidth\"\n            label=\"Item Width\"\n            value={itemWidth}\n            onChange={this.handleChange}\n          />\n          <FormField\n            name=\"animationDuration\"\n            label=\"Animation Duration\"\n            value={animationDuration}\n            onChange={this.handleChange}\n          />\n          <label className=\"Form__field-checbox-text\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={(e) => {\n                this.setState({ infinite: e.target.checked });\n              }}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}